# =============================================================================
# Telegram LibGen Bot - Docker Compose Configuration
# =============================================================================

version: '3.8'

services:
  # Main Telegram Bot Service
  libgen-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-libgen-bot
    restart: unless-stopped
    # Network optimizations
    sysctls:
      - net.core.rmem_max=134217728
      - net.core.wmem_max=134217728
      - net.ipv4.tcp_rmem=4096 65536 134217728
      - net.ipv4.tcp_wmem=4096 65536 134217728
      - net.core.netdev_max_backlog=5000
      - net.ipv4.tcp_congestion_control=bbr
    # Enable privileged mode for sysctl changes
    privileged: true
    environment:
      # Load environment variables from .env file
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LIBGEN_MAX_RESULTS=${LIBGEN_MAX_RESULTS:-200}
      - BOT_BOOKS_PER_PAGE=${BOT_BOOKS_PER_PAGE:-5}
      - LIBGEN_SEARCH_TIMEOUT=${LIBGEN_SEARCH_TIMEOUT:-30}
      - LIBGEN_MAX_RETRIES=${LIBGEN_MAX_RETRIES:-1}
      - BOT_DOWNLOAD_LINKS_TIMEOUT=${BOT_DOWNLOAD_LINKS_TIMEOUT:-10}
      - BOT_MAX_LINKS_PER_BOOK=${BOT_MAX_LINKS_PER_BOOK:-8}
      - BOT_MAX_ALTERNATIVE_LINKS=${BOT_MAX_ALTERNATIVE_LINKS:-3}
      - BOT_BOOK_PROCESSING_DELAY=${BOT_BOOK_PROCESSING_DELAY:-0.1}
      - BOT_CANCELLATION_CHECK_INTERVAL=${BOT_CANCELLATION_CHECK_INTERVAL:-0.25}
      - BOT_CANCELLATION_CHECKS_COUNT=${BOT_CANCELLATION_CHECKS_COUNT:-20}
      - FEATURE_DOWNLOAD_LINKS=${FEATURE_DOWNLOAD_LINKS:-true}
      - FEATURE_ALTERNATIVE_SEARCH=${FEATURE_ALTERNATIVE_SEARCH:-true}
      - FEATURE_PAGINATION=${FEATURE_PAGINATION:-true}
      - FEATURE_STOP_COMMAND=${FEATURE_STOP_COMMAND:-true}
      - LIBGEN_RESOLVE_FINAL_URLS=${LIBGEN_RESOLVE_FINAL_URLS:-true}
      - HTTP_USER_AGENT=${HTTP_USER_AGENT:-Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0 Safari/537.36}
      - BOT_NAME=${BOT_NAME:-LibGen Search Bot}
      - BOT_DESCRIPTION=${BOT_DESCRIPTION:-Search for books by sending me a book title, author name, or ISBN.}
      # Proxy settings (optional)
      - HTTP_PROXY=${HTTP_PROXY:-}
      - HTTPS_PROXY=${HTTPS_PROXY:-}
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
    networks:
      - libgen-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  libgen-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: telegram-libgen-bot-dev
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=DEBUG
      - LIBGEN_MAX_RESULTS=50
      - BOT_BOOKS_PER_PAGE=3
    volumes:
      # Mount source code for hot reload
      - .:/app
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - libgen-network
    profiles:
      - dev
    command: ["python", "main.py"]

  # Performance-optimized service
  libgen-bot-perf:
    build:
      context: .
      dockerfile: Dockerfile
      target: performance
    container_name: telegram-libgen-bot-perf
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LIBGEN_MAX_RESULTS=${LIBGEN_MAX_RESULTS:-200}
      - BOT_BOOKS_PER_PAGE=${BOT_BOOKS_PER_PAGE:-5}
      - LIBGEN_SEARCH_TIMEOUT=${LIBGEN_SEARCH_TIMEOUT:-30}
      - LIBGEN_MAX_RETRIES=${LIBGEN_MAX_RETRIES:-1}
      - BOT_DOWNLOAD_LINKS_TIMEOUT=${BOT_DOWNLOAD_LINKS_TIMEOUT:-10}
      - BOT_MAX_LINKS_PER_BOOK=${BOT_MAX_LINKS_PER_BOOK:-8}
      - BOT_MAX_ALTERNATIVE_LINKS=${BOT_MAX_ALTERNATIVE_LINKS:-3}
      - BOT_BOOK_PROCESSING_DELAY=${BOT_BOOK_PROCESSING_DELAY:-0.1}
      - BOT_CANCELLATION_CHECK_INTERVAL=${BOT_CANCELLATION_CHECK_INTERVAL:-0.25}
      - BOT_CANCELLATION_CHECKS_COUNT=${BOT_CANCELLATION_CHECKS_COUNT:-20}
      - FEATURE_DOWNLOAD_LINKS=${FEATURE_DOWNLOAD_LINKS:-true}
      - FEATURE_ALTERNATIVE_SEARCH=${FEATURE_ALTERNATIVE_SEARCH:-true}
      - FEATURE_PAGINATION=${FEATURE_PAGINATION:-true}
      - FEATURE_STOP_COMMAND=${FEATURE_STOP_COMMAND:-true}
      - LIBGEN_RESOLVE_FINAL_URLS=${LIBGEN_RESOLVE_FINAL_URLS:-true}
      - HTTP_USER_AGENT=${HTTP_USER_AGENT:-Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0 Safari/537.36}
      - BOT_NAME=${BOT_NAME:-LibGen Search Bot}
      - BOT_DESCRIPTION=${BOT_DESCRIPTION:-Search for books by sending me a book title, author name, or ISBN.}
      - HTTP_PROXY=${HTTP_PROXY:-}
      - HTTPS_PROXY=${HTTPS_PROXY:-}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - libgen-network
    profiles:
      - performance
    # Network optimizations
    sysctls:
      - net.core.rmem_max=134217728
      - net.core.wmem_max=134217728
      - net.ipv4.tcp_rmem=4096 65536 134217728
      - net.ipv4.tcp_wmem=4096 65536 134217728
      - net.core.netdev_max_backlog=5000
      - net.ipv4.tcp_congestion_control=bbr
    # Enable privileged mode for sysctl changes
    privileged: true
    # Resource limits for performance
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Alpine variant for smaller footprint
  libgen-bot-alpine:
    build:
      context: .
      dockerfile: Dockerfile
      target: alpine
    container_name: telegram-libgen-bot-alpine
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - libgen-network
    profiles:
      - alpine
    # Resource limits for Alpine
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Log aggregation service (optional)
  log-aggregator:
    image: fluent/fluentd:latest
    container_name: libgen-bot-logs
    volumes:
      - ./logs:/var/log/fluentd
      - ./docker/fluentd.conf:/fluentd/etc/fluent.conf
    networks:
      - libgen-network
    profiles:
      - logging
    depends_on:
      - libgen-bot

networks:
  libgen-network:
    driver: bridge

volumes:
  logs:
    driver: local
